INITIALISING LSODA #################################################################################################################################################

  subroutine lsoda_initialize(self, f, neq, h0, hmax, hmin, iprint, ixpr, mxstep, mxhnil, mxordn, mxords, jac, jt, g, ng, ml, mu, istate)
    
  procedure(lsoda_rhs_fcn) :: f 
  Right-hand-side function defining the system of ODEs. See the `lsoda_rhs_fcn` interface for more information.
  
  integer, intent(in) :: neq 
  Number of ODEs

RHS INTERFACE ######################################################################################################################################################

  subroutine lsoda_rhs_fcn(self, neq, t, y, ydot, ierr)
      
      import :: dp, lsoda_class
      implicit none

      class(lsoda_class), intent(inout) :: self

      integer, intent(in) :: neq
      Number of ODEs

      real(dp), intent(in) :: t 
      Current time

      real(dp), intent(in) :: y(neq)
      State vector

      real(dp), intent(out) :: ydot(neq) 
      Derivative vector
      
      integer, intent(out) :: ierr
      Set to >= 0 if successful. Set to < 0 to terminate the integration 

  end subroutine
    
OPTIONAL ###########################################################################################################################################################
    
  real(dp), optional, intent(in) :: h0 
  The step size to be attempted on the first step. The default value is determined by the solver.

  real(dp), optional, intent(in) :: hmax
  The maximum absolute step size allowed. The default value is infinite.

  real(dp), optional, intent(in) :: hmin 
  The minimum absolute step size allowed. The default value is 0. (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.)

  integer, optional, intent(in) :: iprint 
  Flag to print warning messages. IXPR = 0 means no printing; IXPR = 1 means warnings will be printed (the default)

  integer, optional, intent(in) :: ixpr
  Flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default); IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages.

  integer, optional, intent(in) :: mxstep 
  Maximum number of (internally defined) steps allowed during one call to the solver. The default value is 10000.
    
  integer, optional, intent(in) :: mxhnil
  Maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10.

  integer, optional, intent(in) :: mxordn 
  Maximum order to be allowed for the nonstiff (Adams) method.  The default value is 12. If MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem.

  integer, optional, intent(in) :: mxords 
  Maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem.

  procedure(lsoda_jac_fcn), optional :: jac 
  The user-supplied jaocobian matrix. See the `lsoda_jac_fcn` for more information.

  integer, optional, intent(in) :: jt
  Jacobian type indicator: 1 means a user-supplied full (NEQ by NEQ) Jacobian;  2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value);  4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation).

LSODA INTEGRATE ####################################################################################################################################################

  Integrates the ODEs forward in time from `t` until `tout`
  
  subroutine lsoda_integrate(self, y, t, tout, rtol, atol, itask, istate)
    
    class(lsoda_class), intent(inout) :: self
    
    real(dp), intent(inout) :: y(:)
    A real array for the vector of dependent variables, of length NEQ or more.  Used for both input and output on the first call (ISTATE = 1), and only for output on other calls. On the first call, Y must contain the vector of initial values.  On output, Y contains the computed solution vector, evaluated at T.  If desired, the Y array may be used for other purposes between calls to the solver.
    
    real(dp), intent(inout) :: t
    The independent variable.  On input, T is used only on the first call, as the initial point of the integration. On output, after each call, T is the value at which a computed solution y is evaluated (usually the same as TOUT). If a root was found, T is the computed location of the root reached first, on output. On an error return, T is the farthest point reached.

    real(dp), intent(in) :: tout
    The next value of t at which a computed solution is desired. Used only for input.
    When starting the problem (ISTATE = 1), TOUT may be equal to T for one call, then should .ne. T for the next call. For the initial T, an input value of TOUT .ne. T is used in order to determine the direction of the integration (i.e. the algebraic sign of the step sizes) and the rough scale of the problem.  Integration in either direction (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after the first call (i.e. the first call with TOUT .ne. T). Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be monotone, but a value of TOUT which backs up is limited to the current internal T interval, whose endpoints are TCUR - HU and TCUR (see optional outputs, below, for TCUR and HU).
    
    real(dp), intent(in) :: rtol 
    The relative error tolerance.
    
    real(dp), intent(in) :: atol(:) 
    The abolute error tolerance. Can be a length 1 or length `neq`. If it is length `neq`, then a separate tolerance is applied to each evolving variable `y(i)`. I length 1, then the same abosoluate tolerance is applied to every variable
    
    integer, intent(in) :: itask
    An index specifying the task to be performed. Input only. ITASK has the following values and meanings: 
    1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 
    2 means take one step only and return. 
    3 means stop at the first internal mesh point at or beyond t = TOUT and return.
    4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1). TCRIT may be equal to or
      beyond TOUT, but not behind it in the direction of integration. This option is useful if the problem has a singularity at or beyond t = TCRIT. 
    5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1).  
    Note: If ITASK = 4 or 5 and the solver reaches TCRIT (within roundoff), it will return T = TCRIT (exactly) to indicate this (unless ITASK = 4 and TOUT comes 
          before TCRIT, in which case answers at t = TOUT are returned first).

    integer, intent(inout) :: istate
    An index used for input and output to specify the state of the calculation. 
    
    On input, the values of ISTATE are as follows.
    1 means this is the first call for the problem (initializations will be done).  See note below.
    2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. 
      (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.)
    3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are 
      allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.)
      In addition, immediately following a return with ISTATE = 3 (root found), NG and G may be changed. (But changing NG from 0 to .gt. 0 is not allowed.)
    Note: A preliminary call with TOUT = T is not counted as a first call here, as no initialization or checking of input is done. (Such a call is sometimes 
          useful for the purpose of outputting the initial conditions.) Thus the first call for which TOUT .ne. T requires ISTATE = 1 on input.

    On output, ISTATE has the following values and meanings.
    1   means nothing was done; TOUT = t and ISTATE = 1 on input.
    2   means the integration was performed successfully, and no roots were found.
    3   means the integration was successful, and one or more roots were found before satisfying the stop condition specified by ITASK.  See JROOT.
    -1  means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise 
        successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs).
    -2  means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the 
        integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.)
    -3  means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of 
        calls to the solver with illegal input, it will cause the run to stop.
    -4  means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T.The problem may have a singularity, or the input may be inappropriate.
    -5  means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used.
    -6  means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. 
        The integration was successful as far as T.
    -7  means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODAR chooses to 
        switch methods but LRW and/or LIW is too small for the new method.
    -8  means that the user terminated the integration by setting `ierr` < 0 in the function `f`, the jacobian `jac`, or the root function `g`.
    Note:  Since the normal output value of ISTATE is 2, it does not need to be reset for normal continuation. Also, since a negative input value of ISTATE will be regarded as illegal, a negative output value requires the user to change it, and possibly other inputs, before calling the solver again.

    integer :: i
    integer :: itol, ierr
    integer, parameter :: iopt = 1

INTEGRATION INFO ###################################################################################################################################################

  subroutine lsoda_info(self, h, tcur, tolsf, tsw, nst, nfe, nje, nq, imxer, meth)

    class(lsoda_class), intent(inout) :: self

    real(dp), optional, intent(out) :: h 
    The step size currently being attempted
    
    real(dp), optional, intent(out) :: tcur
    The current value of the independent variable which the solver has actually reached, i.e. thecurrent internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done).

    real(dp), optional, intent(out) :: tolsf 
    A tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.)
    
    real(dp), optional, intent(out) :: tsw 
    The value of t at the time of the last method switch, if any.

    integer, optional, intent(out) :: nst 
    The number of steps taken for the problem so far.
    
    integer, optional, intent(out) :: nfe
    The number of f evaluations for the problem so far.
    
    integer, optional, intent(out) :: nje
    The number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far.
    
    integer, optional, intent(out) :: nq 
    The method order currently being attempted.
    
    integer, optional, intent(out) :: imxer
    The index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5.
    
    integer, optional, intent(out) :: meth
    The method indicator for the current step: 1 means Adams (nonstiff), 2 means BDF (stiff).

  end subroutine

####################################################################################################################################################################